#lang racket
(require data/heap)
(provide sim? wire?
         (contract-out
          [make-sim        (-> sim?)]
          [sim-wait!       (-> sim? positive? void?)]
          [sim-time        (-> sim? real?)]
          [sim-add-action! (-> sim? positive? (-> any/c) void?)]

          [make-wire       (-> sim? wire?)]
          [wire-on-change! (-> wire? (-> any/c) void?)]
          [wire-value      (-> wire? boolean?)]
          [wire-set!       (-> wire? boolean? void?)]

          [bus-value (-> (listof wire?) natural?)]
          [bus-set!  (-> (listof wire?) natural? void?)]

          [gate-not  (-> wire? wire? void?)]
          [gate-and  (-> wire? wire? wire? void?)]
          [gate-nand (-> wire? wire? wire? void?)]
          [gate-or   (-> wire? wire? wire? void?)]
          [gate-nor  (-> wire? wire? wire? void?)]
          [gate-xor  (-> wire? wire? wire? void?)]

          [wire-not  (-> wire? wire?)]
          [wire-and  (-> wire? wire? wire?)]
          [wire-nand (-> wire? wire? wire?)]
          [wire-or   (-> wire? wire? wire?)]
          [wire-nor  (-> wire? wire? wire?)]
          [wire-xor  (-> wire? wire? wire?)]

          [flip-flop (-> wire? wire? wire? void?)]))

; structs

(define s-heap (make-heap (lambda(x y) (<= (car x) (car y)))))

(struct wire ([val #:mutable] [actions #:mutable] [simul]) )
(struct sim  ([t #:mutable]  [events #:mutable]))


; sims

(define (make-sim) (sim 0 s-heap))

(define (sim-time s)
  (sim-t s))

(define (sim-add-action! simul time foo)
  (heap-add! (sim-events simul) (cons time foo)))

(define (wait-temp s t)
  (let ([ev (sim-events)])
    (if (< t (heap-min ev))
        (void)
        (begin
          ((cdr (heap-min ev)))
          (heap-remove-min! ev)
          (wait-temp s t)))))


(define (sim-wait! s t)
  (begin
    (set-sim-t! s (+ t (sim-time s)))
    (wait-temp s (sim-time s))))


; wires

(define (make-wire simul)
  (wire #f '() simul))

(define (wire-value w)
  (wire-val w))

(define (set-temp acts)
  (if (not (empty? acts))
      (begin
        ((car (acts)))
        (set-temp (cdr acts)))
      (void)))


(define (wire-set! w bool)
  (if
   (not (eq? (wire-value w) bool))
   (set-temp (wire-actions w))
   (void)))

























